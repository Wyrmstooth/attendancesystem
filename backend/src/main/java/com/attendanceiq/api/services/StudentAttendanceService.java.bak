
// File: src/main/java/com/attendanceiq/api/services/StudentAttendanceService.java
package main.java.com.attendanceiq.api.services;

import main.java.com.attendanceiq.api.dto.AttendanceSummaryDto;
import main.java.com.attendanceiq.api.models.*;
import main.java.com.attendanceiq.api.repositories.AttendanceRecordRepository;
import main.java.com.attendanceiq.api.repositories.CourseRepository;
import main.java.com.attendanceiq.api.repositories.StudentRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class StudentAttendanceService {
    private final StudentRepository studentRepository;
    private final CourseRepository courseRepository;
    private final AttendanceRecordRepository attendanceRepository;

    public List<AttendanceSummaryDto> getStudentAttendanceSummary(User user) {
        Student student = studentRepository.findByUser(user)
                .orElseThrow(() -> new IllegalArgumentException("Student not found"));
        
        // Get all courses the student is enrolled in
        List<Course> courses = courseRepository.findAll().stream()
                .filter(course -> course.getStudents().contains(student))
                .collect(Collectors.toList());
        
        return courses.stream()
                .map(course -> generateSummary(student, course))
                .collect(Collectors.toList());
    }

    private AttendanceSummaryDto generateSummary(Student student, Course course) {
        List<AttendanceRecord> records = attendanceRepository.findByStudentAndCourseId(student, course.getId());
        
        // Count different status types
        Map<AttendanceStatus, Long> statusCounts = records.stream()
                .collect(Collectors.groupingBy(AttendanceRecord::getStatus, Collectors.counting()));
        
        int totalSessions = records.size();
        int presentCount = statusCounts.getOrDefault(AttendanceStatus.PRESENT, 0L).intValue();
        int absentCount = statusCounts.getOrDefault(AttendanceStatus.ABSENT, 0L).intValue();
        int lateCount = statusCounts.getOrDefault(AttendanceStatus.LATE, 0L).intValue();
        int excusedCount = statusCounts.getOrDefault(AttendanceStatus.EXCUSED, 0L).intValue();
        
        double attendancePercentage = totalSessions > 0 
                ? (double) (presentCount + lateCount) / totalSessions * 100 
                : 0.0;
        
        return AttendanceSummaryDto.builder()
                .courseId(course.getId())
                .courseName(course.getName())
                .courseCode(course.getCode())
                .totalSessions(totalSessions)
                .presentCount(presentCount)
                .absentCount(absentCount)
                .lateCount(lateCount)
                .excusedCount(excusedCount)
                .attendancePercentage(attendancePercentage)
                .build();
    }
}
